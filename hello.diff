diff --git a/main.c b/main.c
index 84273da..506f2b3 100644
--- a/main.c
+++ b/main.c
@@ -16,7 +16,7 @@ int QR_Hessenberg_Matrix(double *, double *, double[], double[], int, int);
 void Transpose_Square_Matrix(double *, int);
 
 
-int main()
+int main(int argc, char *argv[])
 {
 	int 			nlines = 0;
 	char			buf[120];
@@ -29,7 +29,7 @@ int main()
 
 	FILE *			fp;
 
-	fp					= fopen("./mag.txt", "r");
+	fp					= fopen(argv[1], "r");
 
 	while (fgets(buf, 100, fp) != NULL)
 		nlines++;
@@ -253,8 +253,10 @@ int main()
 	B[1]				= -B[1];					// y-axis combined bias
 	B[2]				= -B[2];					// z-axis combined bias
 
+	/*
 	for (i = 0; i < 3; i++)
 		printf("%lf\r\n", B[i]);
+		*/
 
 
 	// First calculate QB = Q * B	( 3x1 = 3x3 * 3x1)
@@ -321,8 +323,41 @@ int main()
 	for (i = 0; i < 9; i++)
 		A_1[i] = SQ[i] *hm / hmb;
 
+	/*
+	for (i = 0; i < 3; i++)
+		printf("%lf %lf %lf\r\n", SQ[i * 3], SQ[i * 3 + 1], SQ[i * 3 + 2]);
+	printf("\n");
+	*/
+
+	/*
 	for (i = 0; i < 3; i++)
 		printf("%lf %lf %lf\r\n", A_1[i * 3], A_1[i * 3 + 1], A_1[i * 3 + 2]);
+		*/
+
+	fp = fopen(argv[1], "r");
+	double *MM = NULL;
+	double *MMM = NULL;
+	MM					= (double *)
+	malloc(3 * 1 * sizeof(double));
+	MMM					= (double *)
+	malloc(3 * 1 * sizeof(double));
+	while (fgets(buf, 100, fp) != NULL)
+	{
+		sscanf(buf, "%lf\t%lf\t%lf", &x, &y, &z);
+		MM[0] = x;
+		MM[1] = y;
+		MM[2] = z;
+		MM[0] -= B[0];
+		MM[1] -= B[1];
+		MM[2] -= B[2];
+		Multiply_Matrices(MMM, A_1, 3, 3, MM, 1);
+//		printf("%f %f %f\n", MM[0], MM[1], MM[2]);
+		printf("%f %f %f\n", MMM[0], MMM[1], MMM[2]);
+	}
+	fclose(fp);
+
+	free(MM);
+	free(MMM);
 
 	free(D);
 	free(S);
